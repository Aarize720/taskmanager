services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taskmanager-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-taskmanager}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-taskmanager_password}
      POSTGRES_DB: ${DB_NAME:-taskmanager_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - taskmanager-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-taskmanager}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: taskmanager-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-taskmanager}
      DB_PASSWORD: ${DB_PASSWORD:-taskmanager_password}
      DB_NAME: ${DB_NAME:-taskmanager_db}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_FROM: ${SMTP_FROM:-noreply@taskmanager.com}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - taskmanager-network
    volumes:
      - ./backend/uploads:/app/uploads

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:5000/api}
    container_name: taskmanager-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - backend
    networks:
      - taskmanager-network

  # Cloudflare Tunnel (optionnel)
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: taskmanager-cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run
    environment:
      TUNNEL_TOKEN: ${CLOUDFLARE_TUNNEL_TOKEN:-}
    networks:
      - taskmanager-network
    profiles:
      - cloudflare

volumes:
  postgres_data:
    driver: local

networks:
  taskmanager-network:
    driver: bridge